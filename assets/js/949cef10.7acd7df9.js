"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[439],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},o=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||a;return t?r.createElement(f,d(d({ref:n},o),{},{components:t})):r.createElement(f,d({ref:n},o))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,d=new Array(a);d[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,d[1]=s;for(var u=2;u<a;u++)d[u]=t[u];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},54:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=t(7462),i=(t(7294),t(3905));const a={},d=void 0,s={unversionedId:"Netzwerke/apis",id:"Netzwerke/apis",title:"apis",description:"Api",source:"@site/docs/Netzwerke/apis.md",sourceDirName:"Netzwerke",slug:"/Netzwerke/apis",permalink:"/EF-Informatik/docs/Netzwerke/apis",draft:!1,editUrl:"https://github.com/GabrielMariethoz/EF-Informatik/tree/main/docs/Netzwerke/apis.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Steckbrief",permalink:"/EF-Informatik/docs/about-me"}},l={},u=[{value:"Api",id:"api",level:2},{value:"Json format",id:"json-format",level:2},{value:"Xml format",id:"xml-format",level:2},{value:"Http request:",id:"http-request",level:2},{value:"Url:",id:"url",level:2},{value:"Methoden:",id:"methoden",level:2},{value:"Headers:",id:"headers",level:2},{value:"Body:",id:"body",level:2},{value:"Http status codes",id:"http-status-codes",level:2},{value:"Endpunkte",id:"endpunkte",level:2},{value:"Polling",id:"polling",level:2}],o={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"api"},"Api"),(0,i.kt)("p",null," (application programming interface) is ein schnittstelle die verschiedenen anwendungen erlaubt miteinander zu kommunizieren und daten auszutauschen. grundlegend stellt die api ein satz von regeln und protokollen zur verf\xfcgung, damit eine anwendung daten von einer anderen anwendung anfordern und empfangen kann. ein beispiel daf\xfcr w\xe4re eine website, die daten eines anderen servers oder einer datenbank abrufen m\xf6chte. durch verwendung einer api kann die website eine anfrage an den server oder die datenbank senden und die ben\xf6tigten daten abrufen, ohne die gesamte datenbankstruktur oder das backend-system zu kennen. stattdessen kann die api als zwischenschicht fungieren und anforderungen von einer anwendung an eine andere weiterleiten, wodurch ein nahtloser datenfluss und effektive kommunikation erm\xf6glicht werden."),(0,i.kt)("h2",{id:"json-format"},"Json format"),(0,i.kt)("p",null,"json (javascript object notation) ist ein datenformat, das leicht lesbar und schreibbar ist und h\xe4ufig f\xfcr den austausch von daten zwischen verschiedenen anwendungen verwendet wird."),(0,i.kt)("h2",{id:"xml-format"},"Xml format"),(0,i.kt)("p",null,"xml (extensible markup language) ist ein textformat, das daten in strukturierter form speichert und h\xe4ufig f\xfcr den austausch von daten zwischen verschiedenen systemen verwendet wird."),(0,i.kt)("h2",{id:"http-request"},"Http request:"),(0,i.kt)("p",null,"http request ist ein begriff, der sich auf die anfrage bezieht, die ein client an einen server sendet, um daten abzurufen oder zu senden."),(0,i.kt)("h2",{id:"url"},"Url:"),(0,i.kt)("p",null,"die url (uniform resource locator) ist die adresse, die den standort der ressource angibt, auf die der client zugreifen m\xf6chte."),(0,i.kt)("h2",{id:"methoden"},"Methoden:"),(0,i.kt)("p",null,"die methoden beschreiben die art der anfrage, die der client an den server sendet, z.b. get, post, put oder delete."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GET - fordert den Server auf, eine Ressource abzurufen."),(0,i.kt)("li",{parentName:"ul"},"POST - fordert den Server auf, eine neue Ressource zu erstellen."),(0,i.kt)("li",{parentName:"ul"},"PUT - fordert den Server auf, eine vorhandene Ressource zu bearbeiten/aktualisieren."),(0,i.kt)("li",{parentName:"ul"},"DELETE - fordert den Server auf, eine Ressource zu l\xf6schen.")),(0,i.kt)("h2",{id:"headers"},"Headers:"),(0,i.kt)("p",null,"die headers enthalten informationen \xfcber die anfrage, wie z.b. den verwendeten browser, den akzeptierten datenformattyp usw."),(0,i.kt)("h2",{id:"body"},"Body:"),(0,i.kt)("p",null,"der body enth\xe4lt die tats\xe4chlichen daten, die der client an den server senden m\xf6chte, z.b. benutzername und passwort."),(0,i.kt)("h2",{id:"http-status-codes"},"Http status codes"),(0,i.kt)("p",null,"http-statuscodes geben an, ob eine anfrage erfolgreich bearbeitet wurde oder nicht. beispiele f\xfcr http-statuscodes sind 200 ok, 404 not found und 500 internal server error."),(0,i.kt)("h2",{id:"endpunkte"},"Endpunkte"),(0,i.kt)("p",null,"ein endpunkt ist die spezifische adresse, die einen bestimmten service oder eine bestimmte funktion innerhalb einer api definiert."),(0,i.kt)("h2",{id:"polling"},"Polling"),(0,i.kt)("p",null,'polling bezieht sich auf den prozess, bei dem eine anwendung regelm\xe4\xdfig eine api abfragt, um nach aktualisierten informationen zu suchen. dieser prozess kann auch als "abfragen" bezeichnet\xa0werden."'),(0,i.kt)("h1",{id:"erstellung-einer-api"},"Erstellung einer API"),(0,i.kt)("p",null,'Um eine API zu erstellen braucht man einen Server, z.B. Node-Red. In diesem Beispiel kreeire ich eine API, die gewissen Text in Emojis umwandelt. Am Anfang muss man alle HTTP requests mit der Methode GET einfangen, die zu einem vorher definierten Pfad eingehen. Dann erstellt man eine Funktion, welche den Input ver\xe4ndert. In meinem Beispiel wird "hello" und alle \xe4hnlichen W\xf6rter zu \ud83d\udc4b ver\xe4ndert.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let emoji = msg.payload.text;\n\nemoji = emoji.replace(/hello/gi, '\ud83d\udc4b');\n\nmsg.payload = {\n    msg: emoji\n};\n\nreturn msg;\n")),(0,i.kt)("p",null,"Den Output dieser Funktion kann man dann in Form einer HTTP response zum Client zur\xfcckschicken und schon ist die API fertig. Um einfach eine HTTP resquest zu schicken und eine HTTP response zu bekommen kann man Postman brauchen, welcher einfach zu benutzen ist."))}c.isMDXComponent=!0}}]);